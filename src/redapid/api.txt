/*
 * object
 */

+ release_object (uint16_t object_id) -> uint8_t error_code // decreases object reference count by one, frees it if reference count gets zero


/*
 * inventory
 */

enum object_type {
	OBJECT_TYPE_INVENTORY = 0,
	OBJECT_TYPE_STRING,
	OBJECT_TYPE_LIST,
	OBJECT_TYPE_FILE,
	OBJECT_TYPE_DIRECTORY,
	OBJECT_TYPE_PROCESS,
	OBJECT_TYPE_PROGRAM
}

+ open_inventory           (uint8_t type)          -> uint8_t error_code, uint16_t inventory_id
+ get_inventory_type       (uint16_t inventory_id) -> uint8_t error_code, uint8_t type
+ get_next_inventory_entry (uint16_t inventory_id) -> uint8_t error_code, uint16_t entry_object_id // error_code == NO_MORE_DATA means end-of-inventory
+ rewind_inventory         (uint16_t inventory_id) -> uint8_t error_code


/*
 * string
 */

+ allocate_string   (uint32_t length_to_reserve)                           -> uint8_t error_code, uint16_t string_id
+ truncate_string   (uint16_t string_id, uint32_t length)                  -> uint8_t error_code
+ get_string_length (uint16_t string_id)                                   -> uint8_t error_code, uint32_t length
+ set_string_chuck  (uint16_t string_id, uint32_t offset, char buffer[58]) -> uint8_t error_code
+ get_string_chunk  (uint16_t string_id, uint32_t offset)                  -> uint8_t error_code, char buffer[63] // error_code == NO_MORE_DATA means end-of-string


/*
 * list (of objects)
 */

+ allocate_list    (uint16_t length_to_reserve)                -> uint8_t error_code, uint16_t list_id
+ get_list_length  (uint16_t list_id)                          -> uint8_t error_code, uint16_t length
+ get_list_item    (uint16_t list_id, uint16_t index)          -> uint8_t error_code, uint16_t item_object_id, uint8_t type
+ append_to_list   (uint16_t list_id, uint16_t item_object_id) -> uint8_t error_code
+ remove_from_list (uint16_t list_id, uint16_t index)          -> uint8_t error_code


/*
 * file
 */

enum file_flag { // bitmask
	FILE_FLAG_READ_ONLY    = 0x0001,
	FILE_FLAG_WRITE_ONLY   = 0x0002,
	FILE_FLAG_READ_WRITE   = 0x0004,
	FILE_FLAG_APPEND       = 0x0008,
	FILE_FLAG_CREATE       = 0x0010,
	FILE_FLAG_EXCLUSIVE    = 0x0020,
	FILE_FLAG_NON_BLOCKING = 0x0040,
	FILE_FLAG_TRUNCATE     = 0x0080,
	FILE_FLAG_TEMPORARY    = 0x0100 // can only be used in combination with FILE_FLAG_CREATE | FILE_FLAG_EXCLUSIVE
}

enum file_permission { // bitmask
	FILE_PERMISSION_USER_READ      = 00400,
	FILE_PERMISSION_USER_WRITE     = 00200,
	FILE_PERMISSION_USER_EXECUTE   = 00100,
	FILE_PERMISSION_GROUP_READ     = 00040,
	FILE_PERMISSION_GROUP_WRITE    = 00020,
	FILE_PERMISSION_GROUP_EXECUTE  = 00010,
	FILE_PERMISSION_OTHERS_READ    = 00004,
	FILE_PERMISSION_OTHERS_WRITE   = 00002,
	FILE_PERMISSION_OTHERS_EXECUTE = 00001
}

enum file_origin {
	FILE_ORIGIN_BEGINNING = 0,
	FILE_ORIGIN_CURRENT,
	FILE_ORIGIN_END
}

enum file_event { // bitmask
	FILE_EVENT_READ  = 0x01,
	FILE_EVENT_WRITE = 0x02
}

enum file_type {
	FILE_TYPE_UNKNOWN = 0,
	FILE_TYPE_REGULAR,
	FILE_TYPE_DIRECTORY,
	FILE_TYPE_CHARACTER,
	FILE_TYPE_BLOCK,
	FILE_TYPE_FIFO,
	FILE_TYPE_SYMLINK,
	FILE_TYPE_SOCKET,
	FILE_TYPE_PIPE
}

enum pipe_flag { // bitmask
	PIPE_FLAG_NON_BLOCKING_READ  = 0x0001,
	PIPE_FLAG_NON_BLOCKING_WRITE = 0x0002
}

+ open_file             (uint16_t name_string_id, uint16_t flags, uint16_t permissions,
                         uint32_t uid, uint32_t gid)                                    -> uint8_t error_code, uint16_t file_id
+ create_pipe           (uint16_t flags)                                                -> uint8_t error_code, uint16_t file_id
+ get_file_info         (uint16_t file_id)                                              -> uint8_t error_code,
                                                                                           uint8_t type,
                                                                                           uint16_t name_string_id,
                                                                                           uint16_t flags,
                                                                                           uint16_t permissions,
                                                                                           uint32_t uid,
                                                                                           uint32_t gid,
                                                                                           uint64_t length,
                                                                                           uint64_t access_timestamp,
                                                                                           uint64_t modification_timestamp,
                                                                                           uint64_t status_change_timestamp
+ read_file             (uint16_t file_id, uint8_t length_to_read)                      -> uint8_t error_code, uint8_t buffer[62], uint8_t length_read // error_code == NO_MORE_DATA means end-of-file
+ read_file_async       (uint16_t file_id, uint64_t length_to_read)                     -> uint8_t error_code
+ abort_async_file_read (uint16_t file_id)                                              -> uint8_t error_code
+ write_file            (uint16_t file_id, uint8_t buffer[61], uint8_t length_to_write) -> uint8_t error_code, uint8_t length_written
+ write_file_unchecked  (uint16_t file_id, uint8_t buffer[61], uint8_t length_to_write) // no response
+ write_file_async      (uint16_t file_id, uint8_t buffer[61], uint8_t length_to_write) // no response
+ set_file_position     (uint16_t file_id, int64_t offset, uint8_t origin)              -> uint8_t error_code, uint64_t position
+ get_file_position     (uint16_t file_id)                                              -> uint8_t error_code, uint64_t position
? set_file_events       (uint16_t file_id, uint8_t events)                              -> uint8_t error_code
? get_file_events       (uint16_t file_id)                                              -> uint8_t error_code, uint8_t events

+ callback: async_file_read     -> uint16_t file_id, uint8_t error_code, uint8_t buffer[60], uint8_t length_read // error_code == NO_MORE_DATA means end-of-file
+ callback: async_file_write    -> uint16_t file_id, uint8_t error_code, uint8_t length_written
? callback: file_event_occurred -> uint16_t file_id, uint8_t events

+ lookup_file_info           (uint16_t name_string_id, bool follow_symlink)         -> uint8_t error_code,
                                                                                       uint8_t type,
                                                                                       uint16_t permissions,
                                                                                       uint32_t uid,
                                                                                       uint32_t gid,
                                                                                       uint64_t length,
                                                                                       uint64_t access_timestamp,
                                                                                       uint64_t modification_timestamp,
                                                                                       uint64_t status_change_timestamp
? lookup_canonical_file_name (uint16_t name_string_id)                              -> uint8_t error_code, uint16_t canonical_name_string_id
? calculate_file_sha1_digest (uint16_t name_string_id)                              -> uint8_t error_code, uint8_t digest[20]
? remove_file                (uint16_t name_string_id, bool recursive)              -> uint8_t error_code
? rename_file                (uint16_t source_string_id, uint16_t target_string_id) -> uint8_t error_code
? create_symlink             (uint16_t target_string_id, uint16_t name_string_id)   -> uint8_t error_code
+ lookup_symlink_target      (uint16_t name_string_id, bool canonicalize)           -> uint8_t error_code, uint16_t target_string_id


/*
 * directory
 */

enum directory_flag { // bitmask
	DIRECTORY_FLAG_RECURSIVE = 0x0001,
	DIRECTORY_FLAG_EXCLUSIVE = 0x0002
};

+ open_directory           (uint16_t name_string_id) -> uint8_t error_code, uint16_t directory_id
+ get_directory_name       (uint16_t directory_id)   -> uint8_t error_code, uint16_t name_string_id
+ get_next_directory_entry (uint16_t directory_id)   -> uint8_t error_code, uint16_t name_string_id, uint8_t type // error_code == NO_MORE_DATA means end-of-directory
+ rewind_directory         (uint16_t directory_id)   -> uint8_t error_code

+ create_directory (uint16_t name_string_id, uint16_t flags, uint16_t permissions, uint32_t uid, uint32_t gid) -> uint8_t error_code


/*
 * process
 */

enum process_signal {
	PROCESS_SIGNAL_INTERRUPT = 2,  // SIGINT
	PROCESS_SIGNAL_QUIT      = 3,  // SIGQUIT
	PROCESS_SIGNAL_ABORT     = 6,  // SIGABRT
	PROCESS_SIGNAL_KILL      = 9,  // SIGKILL
	PROCESS_SIGNAL_USER1     = 10, // SIGUSR1
	PROCESS_SIGNAL_USER2     = 12, // SIGUSR2
	PROCESS_SIGNAL_TERMINATE = 15, // SIGTERM
	PROCESS_SIGNAL_CONTINUE  = 18, // SIGCONT
	PROCESS_SIGNAL_STOP      = 19  // SIGSTOP
}

enum process_state {
	PROCESS_STATE_UNKNOWN = 0,
	PROCESS_STATE_RUNNING,
	PROCESS_STATE_ERROR,
	PROCESS_STATE_EXITED, // terminated normally
	PROCESS_STATE_KILLED, // terminated by signal
	PROCESS_STATE_STOPPED // stopped by signal
}

enum process_error_code {
	PROCESS_ERROR_CODE_INTERNAL_ERROR = 125, // EXIT_CANCELED: internal error prior to exec attempt
	PROCESS_ERROR_CODE_CANNOT_EXECUTE = 126, // EXIT_CANNOT_INVOKE: executable located, but not usable
	PROCESS_ERROR_CODE_DOES_NOT_EXIST = 127  // EXIT_ENOENT: could not find executable to exec
}

+ spawn_process                 (uint16_t executable_string_id,
                                 uint16_t arguments_list_id,
                                 uint16_t environment_list_id,
                                 uint16_t working_directory_string_id,
                                 uint32_t uid,
                                 uint32_t gid,
                                 uint16_t stdin_file_id,
                                 uint16_t stdout_file_id,
                                 uint16_t stderr_file_id)             -> uint8_t error_code, uint16_t process_id
+ kill_process                  (uint16_t process_id, uint8_t signal) -> uint8_t error_code
+ get_process_command           (uint16_t process_id)                 -> uint8_t error_code,
                                                                         uint16_t executable_string_id,
                                                                         uint16_t arguments_list_id,
                                                                         uint16_t environment_list_id,
                                                                         uint16_t working_directory_string_id
+ get_process_identity          (uint16_t process_id)                 -> uint8_t error_code,
                                                                         uint32_t uid,
                                                                         uint32_t gid
+ get_process_stdio             (uint16_t process_id)                 -> uint8_t error_code,
                                                                         uint16_t stdin_file_id,
                                                                         uint16_t stdout_file_id,
                                                                         uint16_t stderr_file_id
+ get_process_state             (uint16_t process_id)                 -> uint8_t error_code,
                                                                         uint8_t state,
                                                                         uint64_t timestamp,
                                                                         uint32_t pid,
                                                                         uint8_t exit_code

+ callback: process_state_changed -> uint16_t process_id, uint8_t state, uint64_t timestamp, uint32_t pid, uint8_t exit_code


/*
 * (persistent) program (configuration)
 */

enum program_stdio_redirection {
	PROGRAM_STDIO_REDIRECTION_DEV_NULL = 0,
	PROGRAM_STDIO_REDIRECTION_PIPE,
	PROGRAM_STDIO_REDIRECTION_FILE,
	PROGRAM_STDIO_REDIRECTION_STDOUT, // can only be used to redirect stderr to stdout
	PROGRAM_STDIO_REDIRECTION_LOG     // can only be used for stdout and stderr
}

enum program_start_condition {
	PROGRAM_START_CONDITION_NEVER = 0,
	PROGRAM_START_CONDITION_NOW,
	PROGRAM_START_CONDITION_REBOOT,
	PROGRAM_START_CONDITION_TIMESTAMP
}

enum program_repeat_mode {
	PROGRAM_REPEAT_MODE_NEVER = 0,
	PROGRAM_REPEAT_MODE_INTERVAL,
	PROGRAM_REPEAT_MODE_SELECTION
}

+ define_program                  (uint16_t identifier_string_id) -> uint8_t error_code, uint16_t program_id
? recover_program                 (uint16_t identifier_string_id) -> uint8_t error_code, uint16_t program_id
+ undefine_program                (uint16_t program_id)           -> uint8_t error_code
? purge_program                   (uint16_t identifier_string_id) -> uint8_t error_code
+ get_program_identifier          (uint16_t program_id)           -> uint8_t error_code, uint16_t identifier_string_id
+ get_program_directory           (uint16_t program_id)           -> uint8_t error_code, uint16_t directory_string_id
+ set_program_command             (uint16_t program_id,
                                   uint16_t executable_string_id,
                                   uint16_t arguments_list_id,
                                   uint16_t environment_list_id)  -> uint8_t error_code
+ get_program_command             (uint16_t program_id)           -> uint8_t error_code,
                                                                     uint16_t executable_string_id,
                                                                     uint16_t arguments_list_id,
                                                                     uint16_t environment_list_id
+ set_program_stdio_redirection   (uint16_t program_id,
                                   uint8_t stdin_redirection,
                                   uint16_t stdin_file_name_string_id,
                                   uint8_t stdout_redirection,
                                   uint16_t stdout_file_name_string_id,
                                   uint8_t stderr_redirection,
                                   uint16_t stderr_file_name_string_id)
                                                                  -> uint8_t error_code
+ get_program_stdio_redirection   (uint16_t program_id)           -> uint8_t error_code,
                                                                     uint8_t stdin_redirection,
                                                                     uint16_t stdin_file_name_string_id,
                                                                     uint8_t stdout_redirection,
                                                                     uint16_t stdout_file_name_string_id,
                                                                     uint8_t stderr_redirection,
                                                                     uint16_t stderr_file_name_string_id
+ set_program_schedule            (uint16_t program_id,
                                   uint8_t start_condition,
                                   uint64_t start_timestamp,
                                   uint32_t start_delay,
                                   uint8_t repeat_mode,
                                   uint32_t repeat_interval,
                                   uint64_t repeat_second_mask,
                                   uint64_t repeat_minute_mask,
                                   uint32_t repeat_hour_mask,
                                   uint32_t repeat_day_mask,
                                   uint16_t repeat_month_mask,
                                   uint8_t repeat_weekday_mask)   -> uint8_t error_code
+ get_program_schedule            (uint16_t program_id)           -> uint8_t error_code
                                                                     uint8_t start_condition,
                                                                     uint64_t start_timestamp,
                                                                     uint32_t start_delay,
                                                                     uint8_t repeat_mode,
                                                                     uint32_t repeat_interval,
                                                                     uint64_t repeat_second_mask,
                                                                     uint64_t repeat_minute_mask,
                                                                     uint32_t repeat_hour_mask,
                                                                     uint32_t repeat_day_mask,
                                                                     uint16_t repeat_month_mask,
                                                                     uint8_t repeat_weekday_mask
+ get_last_program_spawned_process (uint16_t program_id)          -> uint8_t error_code, uint16_t process_id
+ get_last_program_scheduler_error (uint16_t program_id)          -> uint8_t error_code, uint64_t timestamp, uint16_t message_string_id

+ callback: program_process_spawned          -> uint16_t program_id
+ callback: program_scheduler_error_occurred -> uint16_t program_id


/*
 * config
 */

enum config_option {
	CONFIG_OPTION_GREEN_LED_TRIGGER = 0,   // number -> config_value_led_trigger
	CONFIG_OPTION_RED_LED_TRIGGER,         // number -> config_value_led_trigger
	CONFIG_OPTION_SPI_STACK_TRANSFER_DELAY // number -> microseconds [50..inf]
}

enum config_value_led_trigger {
	CONFIG_VALUE_LED_TRIGGER_CPU = 0,
	CONFIG_VALUE_LED_TRIGGER_GPIO,
	CONFIG_VALUE_LED_TRIGGER_HEARTBEAT,
	CONFIG_VALUE_LED_TRIGGER_MMC,
	CONFIG_VALUE_LED_TRIGGER_OFF,
	CONFIG_VALUE_LED_TRIGGER_ON
}

? set_config_number(uint32_t option, int64_t value)            -> uint8_t error_code
? set_config_boolean(uint32_t option, bool value)              -> uint8_t error_code
? set_config_string(uint32_t option, uint16_t value_string_id) -> uint8_t error_code
? get_config_number(uint32_t option)                           -> uint8_t error_code, int64_t value
? get_config_boolean(uint32_t option)                          -> uint8_t error_code, bool value
? get_config_string(uint32_t option)                           -> uint8_t error_code, uint16_t value_string_id


enum option_group {
	OPTION_GROUP_BRICKD = 0,
	OPTION_GROUP_REDAPID = 0,
}

? set_option_value (uint8_t group, uint16_t name_string_id, uint16_t value_string_id) -> uint8_t error_code
? get_option_value (uint8_t group, uint16_t name_string_id)                           -> uint8_t error_code, uint16_t value_string_id
? remove_option    (uint8_t group, uint16_t name_string_id)                           -> uint8_t error_code

/*
 * misc
 */

// if the current session changed then all object IDs known to the client are invalid
? get_session () -> uint64_t session

? callback: session_changed -> uint64_t session
