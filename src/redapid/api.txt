/*
 * error
 */

enum api_e {
	API_E_SUCCESS = 0,
	API_E_UNKNOWN_ERROR,
	API_E_INVALID_OPERATION,
	API_E_OPERATION_ABORTED,
	API_E_INTERNAL_ERROR,
	API_E_UNKNOWN_SESSION_ID,
	API_E_NO_FREE_SESSION_ID,
	API_E_UNKNOWN_OBJECT_ID,
	API_E_NO_FREE_OBJECT_ID,
	API_E_OBJECT_IS_LOCKED,
	API_E_NO_MORE_DATA,
	API_E_WRONG_LIST_ITEM_TYPE,
	API_E_MALFORMED_PROGRAM_CONFIG,

	API_E_INVALID_PARAMETER = 128, // EINVAL
	API_E_NO_FREE_MEMORY,          // ENOMEM
	API_E_NO_FREE_SPACE,           // ENOSPC
	API_E_ACCESS_DENIED,           // EACCES
	API_E_ALREADY_EXISTS,          // EEXIST
	API_E_DOES_NOT_EXIST,          // ENOENT
	API_E_INTERRUPTED,             // EINTR
	API_E_IS_DIRECTORY,            // EISDIR
	API_E_NOT_A_DIRECTORY,         // ENOTDIR
	API_E_WOULD_BLOCK,             // EWOULDBLOCK
	API_E_OVERFLOW,                // EOVERFLOW
	API_E_BAD_FILE_DESCRIPTOR,     // EBADF
	API_E_OUT_OF_RANGE,            // ERANGE
	API_E_NAME_TOO_LONG,           // ENAMETOOLONG
	API_E_INVALID_SEEK,            // ESPIPE
	API_E_NOT_SUPPORTED            // ENOTSUP
	API_E_TOO_MANY_OPEN_FILES      // EMFILE
};


/*
 * session
 */

+ create_session           (uint32_t lifetime)                      -> uint8_t error_code, uint16_t session_id
+ expire_session           (uint16_t session_id)                    -> uint8_t error_code
+ expire_session_unchecked (uint16_t session_id)                    // no response
+ keep_session_alive       (uint16_t session_id, uint32_t lifetime) -> uint8_t error_code


/*
 * object
 */

enum object_type {
	OBJECT_TYPE_STRING = 0,
	OBJECT_TYPE_LIST,
	OBJECT_TYPE_FILE,
	OBJECT_TYPE_DIRECTORY,
	OBJECT_TYPE_PROCESS,
	OBJECT_TYPE_PROGRAM
}

+ release_object           (uint16_t object_id, uint16_t session_id) -> uint8_t error_code // decreases object reference count by one, frees it if reference count gets zero
+ release_object_unchecked (uint16_t object_id, uint16_t session_id) // no response


/*
 * string
 */

+ allocate_string   (uint32_t length_to_reserve, char buffer[58],
                     uint16_t session_id)                                  -> uint8_t error_code, uint16_t string_id
+ truncate_string   (uint16_t string_id, uint32_t length)                  -> uint8_t error_code
+ get_string_length (uint16_t string_id)                                   -> uint8_t error_code, uint32_t length
+ set_string_chuck  (uint16_t string_id, uint32_t offset, char buffer[58]) -> uint8_t error_code
+ get_string_chunk  (uint16_t string_id, uint32_t offset)                  -> uint8_t error_code, char buffer[63] // error_code == NO_MORE_DATA means end-of-string


/*
 * list (of objects)
 */

+ allocate_list    (uint16_t length_to_reserve,
                    uint16_t session_id)                       -> uint8_t error_code, uint16_t list_id
+ get_list_length  (uint16_t list_id)                          -> uint8_t error_code, uint16_t length
+ get_list_item    (uint16_t list_id, uint16_t index,
                    uint16_t session_id)                       -> uint8_t error_code, uint16_t item_object_id, uint8_t type
+ append_to_list   (uint16_t list_id, uint16_t item_object_id) -> uint8_t error_code
+ remove_from_list (uint16_t list_id, uint16_t index)          -> uint8_t error_code


/*
 * file
 */

enum file_flag { // bitmask
	FILE_FLAG_READ_ONLY    = 0x0001,
	FILE_FLAG_WRITE_ONLY   = 0x0002,
	FILE_FLAG_READ_WRITE   = 0x0004,
	FILE_FLAG_APPEND       = 0x0008,
	FILE_FLAG_CREATE       = 0x0010,
	FILE_FLAG_EXCLUSIVE    = 0x0020,
	FILE_FLAG_NON_BLOCKING = 0x0040,
	FILE_FLAG_TRUNCATE     = 0x0080,
	FILE_FLAG_TEMPORARY    = 0x0100 // can only be used in combination with FILE_FLAG_CREATE | FILE_FLAG_EXCLUSIVE
}

enum file_permission { // bitmask
	FILE_PERMISSION_USER_READ      = 00400,
	FILE_PERMISSION_USER_WRITE     = 00200,
	FILE_PERMISSION_USER_EXECUTE   = 00100,
	FILE_PERMISSION_GROUP_READ     = 00040,
	FILE_PERMISSION_GROUP_WRITE    = 00020,
	FILE_PERMISSION_GROUP_EXECUTE  = 00010,
	FILE_PERMISSION_OTHERS_READ    = 00004,
	FILE_PERMISSION_OTHERS_WRITE   = 00002,
	FILE_PERMISSION_OTHERS_EXECUTE = 00001
}

enum file_origin {
	FILE_ORIGIN_BEGINNING = 0,
	FILE_ORIGIN_CURRENT,
	FILE_ORIGIN_END
}

enum file_event { // bitmask
	FILE_EVENT_READABLE = 0x01,
	FILE_EVENT_WRITABLE = 0x02
}

enum file_type {
	FILE_TYPE_UNKNOWN = 0,
	FILE_TYPE_REGULAR,
	FILE_TYPE_DIRECTORY,
	FILE_TYPE_CHARACTER,
	FILE_TYPE_BLOCK,
	FILE_TYPE_FIFO,
	FILE_TYPE_SYMLINK,
	FILE_TYPE_SOCKET,
	FILE_TYPE_PIPE
}

enum pipe_flag { // bitmask
	PIPE_FLAG_NON_BLOCKING_READ  = 0x0001,
	PIPE_FLAG_NON_BLOCKING_WRITE = 0x0002
}

+ open_file             (uint16_t name_string_id, uint16_t flags, uint16_t permissions,
                         uint32_t uid, uint32_t gid, uint16_t session_id)               -> uint8_t error_code, uint16_t file_id
+ create_pipe           (uint16_t flags, uint16_t session_id)                           -> uint8_t error_code, uint16_t file_id
+ get_file_info         (uint16_t file_id, uint16_t session_id)                         -> uint8_t error_code,
                                                                                           uint8_t type,
                                                                                           uint16_t name_string_id,
                                                                                           uint16_t flags,
                                                                                           uint16_t permissions,
                                                                                           uint32_t uid,
                                                                                           uint32_t gid,
                                                                                           uint64_t length,
                                                                                           uint64_t access_timestamp,
                                                                                           uint64_t modification_timestamp,
                                                                                           uint64_t status_change_timestamp
+ read_file             (uint16_t file_id, uint8_t length_to_read)                      -> uint8_t error_code, uint8_t buffer[62], uint8_t length_read // error_code == NO_MORE_DATA means end-of-file
+ read_file_async       (uint16_t file_id, uint64_t length_to_read)                     // no response
+ abort_async_file_read (uint16_t file_id)                                              -> uint8_t error_code
+ write_file            (uint16_t file_id, uint8_t buffer[61], uint8_t length_to_write) -> uint8_t error_code, uint8_t length_written
+ write_file_unchecked  (uint16_t file_id, uint8_t buffer[61], uint8_t length_to_write) // no response
+ write_file_async      (uint16_t file_id, uint8_t buffer[61], uint8_t length_to_write) // no response
+ set_file_position     (uint16_t file_id, int64_t offset, uint8_t origin)              -> uint8_t error_code, uint64_t position
+ get_file_position     (uint16_t file_id)                                              -> uint8_t error_code, uint64_t position
? set_file_events       (uint16_t file_id, uint8_t events)                              -> uint8_t error_code
? get_file_events       (uint16_t file_id)                                              -> uint8_t error_code, uint8_t events

+ callback: async_file_read     -> uint16_t file_id, uint8_t error_code, uint8_t buffer[60], uint8_t length_read // error_code == NO_MORE_DATA means end-of-file
+ callback: async_file_write    -> uint16_t file_id, uint8_t error_code, uint8_t length_written
? callback: file_event_occurred -> uint16_t file_id, uint8_t events

+ lookup_file_info           (uint16_t name_string_id, bool follow_symlink)         -> uint8_t error_code,
                                                                                       uint8_t type,
                                                                                       uint16_t permissions,
                                                                                       uint32_t uid,
                                                                                       uint32_t gid,
                                                                                       uint64_t length,
                                                                                       uint64_t access_timestamp,
                                                                                       uint64_t modification_timestamp,
                                                                                       uint64_t status_change_timestamp
? lookup_canonical_file_name (uint16_t name_string_id)                              -> uint8_t error_code, uint16_t canonical_name_string_id
? calculate_file_sha1_digest (uint16_t name_string_id)                              -> uint8_t error_code, uint8_t digest[20]
? remove_file                (uint16_t name_string_id)                              -> uint8_t error_code
? rename_file                (uint16_t source_string_id, uint16_t target_string_id) -> uint8_t error_code
? create_symlink             (uint16_t target_string_id, uint16_t name_string_id)   -> uint8_t error_code
+ lookup_symlink_target      (uint16_t name_string_id, bool canonicalize,
                              uint16_t session_id)                                  -> uint8_t error_code, uint16_t target_string_id


/*
 * directory
 */

enum directory_entry_type {
	DIRECTORY_ENTRY_TYPE_UNKNOWN = 0,
	DIRECTORY_ENTRY_TYPE_REGULAR,
	DIRECTORY_ENTRY_TYPE_DIRECTORY,
	DIRECTORY_ENTRY_TYPE_CHARACTER,
	DIRECTORY_ENTRY_TYPE_BLOCK,
	DIRECTORY_ENTRY_TYPE_FIFO,
	DIRECTORY_ENTRY_TYPE_SYMLINK,
	DIRECTORY_ENTRY_TYPE_SOCKET
};

enum directory_flag { // bitmask
	DIRECTORY_FLAG_RECURSIVE = 0x0001,
	DIRECTORY_FLAG_EXCLUSIVE = 0x0002
};

+ open_directory           (uint16_t name_string_id, uint16_t session_id) -> uint8_t error_code, uint16_t directory_id
+ get_directory_name       (uint16_t directory_id, uint16_t session_id)   -> uint8_t error_code, uint16_t name_string_id
+ get_next_directory_entry (uint16_t directory_id, uint16_t session_id)   -> uint8_t error_code, uint16_t name_string_id, uint8_t type // error_code == NO_MORE_DATA means end-of-directory
+ rewind_directory         (uint16_t directory_id)                        -> uint8_t error_code

+ create_directory (uint16_t name_string_id, uint16_t flags, uint16_t permissions, uint32_t uid, uint32_t gid) -> uint8_t error_code
? remove_directory (uint16_t name_string_id, uint16_t flags)                                                   -> uint8_t error_code
? rename_directory (uint16_t source_string_id, uint16_t target_string_id)                                      -> uint8_t error_code


/*
 * process
 */

enum process_signal {
	PROCESS_SIGNAL_INTERRUPT = 2,  // SIGINT
	PROCESS_SIGNAL_QUIT      = 3,  // SIGQUIT
	PROCESS_SIGNAL_ABORT     = 6,  // SIGABRT
	PROCESS_SIGNAL_KILL      = 9,  // SIGKILL
	PROCESS_SIGNAL_USER1     = 10, // SIGUSR1
	PROCESS_SIGNAL_USER2     = 12, // SIGUSR2
	PROCESS_SIGNAL_TERMINATE = 15, // SIGTERM
	PROCESS_SIGNAL_CONTINUE  = 18, // SIGCONT
	PROCESS_SIGNAL_STOP      = 19  // SIGSTOP
}

enum process_state {
	PROCESS_STATE_UNKNOWN = 0,
	PROCESS_STATE_RUNNING,
	PROCESS_STATE_ERROR,
	PROCESS_STATE_EXITED, // terminated normally
	PROCESS_STATE_KILLED, // terminated by signal
	PROCESS_STATE_STOPPED // stopped by signal
}

enum process_e {
	PROCESS_E_INTERNAL_ERROR = 125, // EXIT_CANCELED: internal error prior to exec attempt
	PROCESS_E_CANNOT_EXECUTE = 126, // EXIT_CANNOT_INVOKE: executable located, but not usable
	PROCESS_E_DOES_NOT_EXIST = 127  // EXIT_ENOENT: could not find executable to exec
}

+ get_processes                 (uint16_t session_id)                 -> uint8_t error_code, uint16_t processes_list_id
+ spawn_process                 (uint16_t executable_string_id,
                                 uint16_t arguments_list_id,
                                 uint16_t environment_list_id,
                                 uint16_t working_directory_string_id,
                                 uint32_t uid,
                                 uint32_t gid,
                                 uint16_t stdin_file_id,
                                 uint16_t stdout_file_id,
                                 uint16_t stderr_file_id,
                                 uint16_t session_id)                 -> uint8_t error_code, uint16_t process_id
+ kill_process                  (uint16_t process_id, uint8_t signal) -> uint8_t error_code
+ get_process_command           (uint16_t process_id,
                                 uint16_t session_id)                 -> uint8_t error_code,
                                                                         uint16_t executable_string_id,
                                                                         uint16_t arguments_list_id,
                                                                         uint16_t environment_list_id,
                                                                         uint16_t working_directory_string_id
+ get_process_identity          (uint16_t process_id)                 -> uint8_t error_code,
                                                                         uint32_t pid,
                                                                         uint32_t uid,
                                                                         uint32_t gid
+ get_process_stdio             (uint16_t process_id,
                                 uint16_t session_id)                 -> uint8_t error_code,
                                                                         uint16_t stdin_file_id,
                                                                         uint16_t stdout_file_id,
                                                                         uint16_t stderr_file_id
+ get_process_state             (uint16_t process_id)                 -> uint8_t error_code,
                                                                         uint8_t state,
                                                                         uint8_t exit_code

+ callback: process_state_changed -> uint16_t process_id, uint8_t state, uint8_t exit_code


/*
 * (persistent) program (configuration)
 */

enum program_stdio_redirection {
	PROGRAM_STDIO_REDIRECTION_DEV_NULL = 0,
	PROGRAM_STDIO_REDIRECTION_PIPE,
	PROGRAM_STDIO_REDIRECTION_FILE,
	PROGRAM_STDIO_REDIRECTION_LOG,   // can only be used for stdout and stderr
	PROGRAM_STDIO_REDIRECTION_STDOUT // can only be used to redirect stderr to stdout
}

enum program_start_condition {
	PROGRAM_START_CONDITION_NEVER = 0,
	PROGRAM_START_CONDITION_NOW,
	PROGRAM_START_CONDITION_REBOOT,
	PROGRAM_START_CONDITION_TIMESTAMP
}

enum program_repeat_mode {
	PROGRAM_REPEAT_MODE_NEVER = 0,
	PROGRAM_REPEAT_MODE_INTERVAL,
	PROGRAM_REPEAT_MODE_SELECTION
}

+ get_defined_programs            (uint16_t session_id)           -> uint8_t error_code, uint16_t programs_list_id
? get_undefined_programs          (uint16_t session_id)           -> uint8_t error_code, uint16_t identifiers_list_id
+ define_program                  (uint16_t identifier_string_id,
                                   uint16_t session_id)           -> uint8_t error_code, uint16_t program_id
+ undefine_program                (uint16_t program_id)           -> uint8_t error_code
? recover_program                 (uint16_t identifier_string_id,
                                   uint16_t session_id)           -> uint8_t error_code, uint16_t program_id
? purge_program                   (uint16_t identifier_string_id) -> uint8_t error_code
+ get_program_identifier          (uint16_t program_id,
                                   uint16_t session_id)           -> uint8_t error_code, uint16_t identifier_string_id
+ get_program_root_directory      (uint16_t program_id,
                                   uint16_t session_id)           -> uint8_t error_code, uint16_t root_directory_string_id
+ set_program_command             (uint16_t program_id,
                                   uint16_t executable_string_id,
                                   uint16_t arguments_list_id,
                                   uint16_t environment_list_id,
                                   uint16_t working_directory_string_id)
                                                                  -> uint8_t error_code
+ get_program_command             (uint16_t program_id,
                                   uint16_t session_id)           -> uint8_t error_code,
                                                                     uint16_t executable_string_id,
                                                                     uint16_t arguments_list_id,
                                                                     uint16_t environment_list_id,
                                                                     uint16_t working_directory_string_id
+ set_program_stdio_redirection   (uint16_t program_id,
                                   uint8_t stdin_redirection,
                                   uint16_t stdin_file_name_string_id,
                                   uint8_t stdout_redirection,
                                   uint16_t stdout_file_name_string_id,
                                   uint8_t stderr_redirection,
                                   uint16_t stderr_file_name_string_id)
                                                                  -> uint8_t error_code
+ get_program_stdio_redirection   (uint16_t program_id,
                                   uint16_t session_id)           -> uint8_t error_code,
                                                                     uint8_t stdin_redirection,
                                                                     uint16_t stdin_file_name_string_id,
                                                                     uint8_t stdout_redirection,
                                                                     uint16_t stdout_file_name_string_id,
                                                                     uint8_t stderr_redirection,
                                                                     uint16_t stderr_file_name_string_id
+ set_program_schedule            (uint16_t program_id,
                                   uint8_t start_condition,
                                   uint64_t start_timestamp,
                                   uint32_t start_delay,
                                   uint8_t repeat_mode,
                                   uint32_t repeat_interval,
                                   uint64_t repeat_second_mask,
                                   uint64_t repeat_minute_mask,
                                   uint32_t repeat_hour_mask,
                                   uint32_t repeat_day_mask,
                                   uint16_t repeat_month_mask,
                                   uint8_t repeat_weekday_mask)   -> uint8_t error_code
+ get_program_schedule            (uint16_t program_id)           -> uint8_t error_code
                                                                     uint8_t start_condition,
                                                                     uint64_t start_timestamp,
                                                                     uint32_t start_delay,
                                                                     uint8_t repeat_mode,
                                                                     uint32_t repeat_interval,
                                                                     uint64_t repeat_second_mask,
                                                                     uint64_t repeat_minute_mask,
                                                                     uint32_t repeat_hour_mask,
                                                                     uint32_t repeat_day_mask,
                                                                     uint16_t repeat_month_mask,
                                                                     uint8_t repeat_weekday_mask
+ get_last_spawned_program_process (uint16_t program_id,
                                    uint16_t session_id)          -> uint8_t error_code, uint16_t process_id, uint64_t timestamp
+ get_last_program_scheduler_error (uint16_t program_id,
                                    uint16_t session_id)          -> uint8_t error_code, uint16_t message_string_id, uint64_t timestamp
+ get_custom_program_option_names  (uint16_t program_id,
                                    uint16_t session_id)          -> uint8_t error_code, uint16_t names_list_id
+ set_custom_program_option_value  (uint16_t program_id,
                                    uint16_t name_string_id,
                                    uint16_t value_string_id)     -> uint8_t error_code
+ get_custom_program_option_value  (uint16_t program_id,
                                    uint16_t name_string_id,
                                    uint16_t session_id)      -> uint8_t error_code, uint16_t value_string_id
+ remove_custom_program_option     (uint16_t program_id,
                                    uint16_t name_string_id)      -> uint8_t error_code

+ callback: program_process_spawned          -> uint16_t program_id
+ callback: program_scheduler_error_occurred -> uint16_t program_id
